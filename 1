C语言的内存管理机制:

信号：
signal函数的原型：
void (*signal(int sig,void (*handler)(int s))(int s) ;
等价于：
Typedef void (*handler_t)(int s);
handler_t signal(int ,handler_t handler );

解释：
Signal(int s,void (*handler)(int s))(int s) 是一个返回值为void，参数类型为int的函数指针
signal是一个带有两个参数的函数，分别为int类型和返回值为void参数类型为int的函数指针；

Void handler(int s){
Printf(“当前信号为第 %d 号信号”,s) ;
}
Void testSig(){
Signal(SiGINT,handler) ;
For(;;){
Printf(“.”) ;
Fflush(stdout) ;
Sleep(1) ;
}
}


InnoDB与MyISAM的区别：
1、InnoDB支持事务，MyISAM不支持事务，事务是一种高级的处理方式，如在一些列增删改查中只要哪个出错还可以回滚，而MyISAM就不可以；
2、InnoDB支持外键，MyISAM不支持外键；
3、InnoDB不支持FULLTEEXT类型的索引；
4、InnoDB中不保存表的行数，如 select cout() from tabl时，InnoDB需要扫描一遍整个表来计算有多少行，但是MyISAM只需要简单的读出保存好的行数即可。
5、清空整个表的时候，InnoDB是一行一行的删除，效率非常慢.MyISAM则会重建；


事务的ACID特性：
1、原子性（Atomicity）
事务是应用中最小的执行单位，就如原子是自然界的最小颗粒，具有不可再分的特性一样，事务是应用中不可再分的最小逻辑执行体；
2、一致性（Consistency）
事务执行的结果，必须是数据库从一个一致性状态，变到另一个一致性状态。。当数据库只包含事务成功提交的结果时，数据库处于一致性状态。如果系统运行发生中断，某个事务尚未完成而被迫中断，而未完成事务对数据库所做的修改已被写入数据库，此时数据库就处于一种不正确（不一致）的状态。因此一致性是通过原子性来保证的。
3、隔离性（Isolation）
各个事务的执行互不干扰，任意一个事务的内部操作对其他并发事务都是隔离的。并发执行的事务之间不能看到对方的中间状态，并发执行的事务之间不能相互影响；
4、持久性（Durability）
持久性是指一个事务一旦被提交，它对数据库所做的改变都要记录到永久存储其中（磁盘）；

索引的底层实现：
https://www.cnblogs.com/zhangzhijian/p/11237178.html



协议是水平的，即协议是控制对等实体间通信的规则。服务是垂直的，即服务是下层向上层通过层间接口提供的.
ARP协议：地址解析协议，在局域网中，网络中实际传输的是“帧”，帧里面是有目标主机的MAC地址。地址解析就是主机在发送帧前将目标IP地址转换为目标MAC地址的过程.

DNS的作用:


Linux中和环境变量相关命令：
1、echo : 显式某个环境变量值
PATH,HOME
2、export：设置一个新的环境变量
1、Env 显式所有的环境变量
2、Unset 清除环境变量
3、Set 显式本地定义的shell变量和环境变量

main函数参数可有三个,系统环境变量参数可以通过第三个参数引用.
环境变量数组以’\0’结束
Int main(int argc,char* argv[],char* env[]) {}
直接用指针访问环境变量值不建议（因为容易被改变）
用函数来访问：getenv()
Printf(“%s\n”,getenv(“PATH”)) ;
Getenv(“SHELL”)
Getenv(“HOME”) 
Putenv(“NEW=ZHENG”) ;// 添加环境变量

环境变量的特性：
1、全局属性
2、


本地变量不可被子进程继承.
环境变量可以被子进程继承.

进程状态：
D（深度睡眠)：disk sleeping
S（浅度睡眠）：sleeping
Z：长时间不回收就会有危害.僵尸进程 kill -9 无法将其杀死.
进程优先级（priority）
UID,PID,PRI,NI等值.

线程：
优点：创建线程比进程代价小得多；
与进程之间的切换相比，线程之间的切换需要OS操作少得多；
线程占用的资源比进程少得多；
能充分利用多处理器的可并行数量；
在等待慢速I/O结束的同时，程序可执行其他的计算任务；
计算密集型，为了能够在多处理器系统上运行，将计算分解到多个线程中实现；
I/O密集型应用，为了提高性能，将I/O操作重叠，线程可以同时等待不同的I/O操作.

缺点：性能损失；健壮性降低；缺乏访问控制；
编程难度提高；编写与调试难度高.

Robust：鲁棒性

进程VS线程
进程是资源分配的基本单位
线程是调度的基本单位

不共享的：
线程ID
一组独立的寄存器
独立的栈结构
Errno
信号屏蔽字
调度优先级

共享：文件描述符表
堆区共享
信号的处理方式
用户id等
LWP : light weight process(轻量级进程)

Int pthread_create(pthread_t* thread,const pthread_attr_t* attr,void* (*start_routine)(void*),void* arg) ;
Pthread_join(tid,NULL) ;

三种线程退出的方式：
Pthread_exit() ;
Pthread_cancel() ;//取消线程，线程取消了还是需要join，一般在主线程中cancel(tid)
Return 

如果在线程中调用exit()，则进程退出，exit是进程退出.

线程异常：
1、单个线程如果出现除0异常，野指针问题导致线程崩溃，进程也会随着崩溃；
2、新城是进程的执行分支，线程出现异常，就类似进程出现异常，今儿触发信号机制，终止进程，进程终止，该进程内的所有线程也就随机退出.

Pthread_t tid ;
NPTL:原生线程库使用tid来操作,tid是地址，pthread_self()也是指向该线程的起始地址.

Lld a.out:查看可执行文件a.out链接了哪些库





GET / HTTP/1.1
报头与有效载荷的有效分离(CR+CF);

HTTP Request
POST / HTTPS/1.1
Connection:Keep-alive：长连接
Content-Length:36 描述有效载荷有多长
User-Agent:发起求情的浏览器信息
Accept：表示可以接收的信息类型
Cookie 用于用户认证（Cookie泄漏）虽然sessionid也有可能被盗，但是并没有用户信息，而且只是临时信息，值丢失了Cookie，并没有丢失用户信息.找回用户的时候，干掉以前的sessionid即可.

Response：
Location：重定向

Ssh服务器：22
MySQL:3306
HTTP：80
HTTPS:443
Telnet:23
ftp：21

sudo是系统管理指令，允许系统管理员让普通用户执行一些或者全部的root命令的一个工具，如halt,reboot,su等等.	

Pidof a.out：查看进程名为a.out的pid



UDP:
无连接，不可靠，面向数据报；
面向数据报：应用层交给UDP多长的报文，UDP原样发送，既不会拆分，也不会合并.
UDP没有发送缓存区，有接收缓存区（但不负责数据的顺序性）
UDP的socket既能读也可写，叫做全双工.，全双工读写同时.
半双工：读写连接
管道是一种特殊的半双工，建立两个管道->全双工
一个数据报64K，因此有限->分包发送，多次发送.

报头的设计:位段方式实现报头，结构决定所有
Struct UDP_Header{
Usigned int src_port:16 ;
Usigned int dst_port:16 ;
Usigned int length:16 ;
Usigned int check:16 ;
} ;

TCP保证安全传输：确认应答机制.
TCP中client收到ACK之后表示上一条消息对方已经收到，双方都是采用这种确认应答机制来保证传输安全.
由于TCP是全双工，所以才会同时又序号以及确认序号，将连着分离.
TCP允许确认信息的丢包.

16位窗口大小为自己的接收缓冲区剩余空间大小.
PSH位：询问窗口大小是否可有空置，轮询检测窗口大小
怒填PSH，让对方上层知道接收缓存区中有数据，是客户端告知服务端有数据
推送字段.

RST：链接并没有成功，客户端就发送数据，此时服务器就发送RST给客户端重置建立；
链接重置；

URG标志位，标志16位紧急指针是否有效.
16位紧急指针表示标识哪部分数据是紧急数据.

TCP可靠：
报头+策略

确认应答机制：
超时重传机制：客户端没收到服务器发送来的ACK就在特定的时间间隔内重传；
在服务端会引起数据包的重复，因此需要序号来区分.
最大超时时间以500ms为单位增加，累计到一定的重传次数，TCP认为网络或者端主机
超时重传是我认为对方没有收到，只是我没有收到ACK，并不表示对方真正没有收到
出现异常，强制关闭连接.
丢包重传（ACK包丢包）；
三次握手：
1、最小成本验证了全双工
2、验证客户端与服务端的连通性全双工


连接管理机制：
网络是动态的，因此传输需要考虑当前的状态.

客户端TIME_WAIT状态等待2MLS时间,否则LAST_ACK发送FIN重传,在一定程度上TIME_WAIT会延时，但不会一直延时.（2MLS保证了 一来一回的数据请求）
如果服务器上有大量的CLOSE_WAIT状态的连接，可能是因为最后忘记close(lfd)

同一端口好可以重复使用.
让本次的服务器启动与上次的无关,即使处于TIME_WAIT状态也能重启.
Setsockopt(sockfd,SOL_SOCK,,&opt,sizeof(opt)) ;

滑动窗口：在TCP发送缓冲区中，已经发送但是并未确认的缓冲区间，滑动窗口在向后移的过程中，是否会扩大或者缩小取决于对方的接收能力以及本地的数据情况.
确认应答机制：串行的情况效率低下；
窗口大小：指无需等待确认应答而可以继续发送数据的最大值. 
接收能力由接收端缓冲区大小决定，标识在窗口大小中.

在TCP中，既有接收缓冲区也有发送缓冲区.
TCP：传输控制协议
传输还受网络的影响.

客户端收到了3个同样的应答时则进行重发.（快重传）
超时重传
快重传：收不到3个同样的应答的时候只能超时重传.

流量控制：flow control
窗口探测-->窗口更新策略
第一次不知窗口大小：1、少发；2、三次握手期间已经在协商窗口大小；
16为窗口大小 65535-->窗口扩大机制

接收端处理数据的速度是有限的.如果发送端发的太快，导致接收端的缓冲区被打满，这个时候如果发送端继续发送，就会造成丢包，继而引起丢包重传等等一些列连锁反应.
因此TCP支持根据接收端的处理能力，来决定发送端的发送速度，简称为流量控制.

接收端将自己可以接收的缓冲区大小放入TCP首部中的“窗口大小”字段，通过ACK端通知发送端；
窗口大小字段越大，说明网络的吞吐量越高；
接收端一旦发现自己的缓冲区快满了，就会将窗口大小设置成一个更小的值通知给发送端；
发送端接收到这个窗口之后，就会减慢自己的发送速度；
如果接收端缓冲区满了，就会将窗口设置为0；这时发送方不再发送数据，但是需要定期发送一个窗口探测数据段，使接收端把窗口大小告诉发送端；

TCP：(发送端->接收端)
可靠：连接，确认应答机制，超时重传，流量控制，按序排序，去重；
效率：快重传，滑动窗口

Write，read将数据交给TCP,发送接收都由TCP操作.

拥塞控制（网络问题）
由于有流量控制：还大量丢包，则可能时网络问题.
拥塞控制就是保证网络恢复的机制.

拥塞窗口(cwnd)：衡量当前网络是否拥塞的窗口.
发送开始的时候，定义拥塞窗口大小为1，每次收到一个ACK应答，拥塞窗口+1，每次发送数据包的时候，将拥塞窗口和主机发聩的窗口大小作比较，取较小的值作为实际发送窗口的大小.
慢启动：引用慢启动的阀值；
当超过阀值时，，就不按照指数方式增长，而是按照线性方式增长.当遇到网络拥塞的时候就回退到满增长.
到达阈值就改变增长策略.


指数增长原因:前期增长慢，需要探测，后期快，快速恢复传输.

延迟应答：
服务端接收到数据之后，需要处理一段时间，如果直接给客户端返回ACK，返回的窗口大小可能较小，如果稍微等待一下就返回一个更大的窗口大小，此时就会增加传输效率.

捎带应答：
返回ACK确认的时候带数据.


TCP可靠性以及性能的保证：
可靠性：
1、检验和；
2、序号（按序号到达）
3、确认应答机制
4、超时重传
5、连接管理
6、流量控制
7、拥塞控制

性能：
1、滑动窗口
2、快速重传
3、延迟应答
4、捎带应答

定时器：超时重传计时器，保活计时器，TIME_WAIT计时器.

所有的内容都是先描述再组织.

粘包问题（应用层数据包）:
明确两个包之间的边界；
Content-Length:标识报头的长度.
避免粘包问题归根到底就是明确两个包之间的边界问题：
1、对于定长的包，保证每次都按固定大小读取即可；例如Request结构，是固定大小的，那么就从缓冲区从头开始按sizeof(Request)依次读取即可；
2、对于变长的包，可以在包头的位置，约定一个包的总长度字段，从而就知道了包的结束位置；
3、对于变长的包，还可以在包和包之间使用明确的分隔符（应用层协议，可以自己来定，只要保证分隔符不和正文冲突即可）
4、TCP中无有效载荷，只关心字节流顺序；
解包：报头与有效载荷分离的过程

UDP不会出现粘包：
面向数据报，发了多少个数据报就接收多少个数据报；
UDP用于对高速传输和实际性要求较高的通信领域，例如早期的QQ，视频等.

TCP异常：
进程终止：进程终止会释放文件描述符，仍然可以发送FIN.和正常关闭没有什么区别；
机器重启：和进程终止情况相同；
及其掉电/网线断开：接收端认为连接还在，一旦接收端有写入操作，接收端发现连接已经不在了，就会进行reset.即使没有写入操作，TCP自己也内置了一个保活定时器，会定期询问对方是否还在.如果对方不在，也会把连接释放.另外，应用层的某些协议，也有一些这样的检测机制.例如HTTP长连接中，也会定期检测对方的状态.例如QQ,在QQ断线之后，也会定期尝试重新连接.(TCP保活定时器是纯技术保活机制，与业务没有关系；自己在应用层会实现保活定时器，心跳机制)

如何用UDP实现可靠性传输：
参考TCP的可靠性机制，在应用层实现类似逻辑：
1、引入序列号，保证数据顺序；
2、引入确认应答机制，确保对方端收到了数据；
3、引入超时重传，如果隔一段时间没有应答，就重发数据；
.........
#include <signal>
Typedef void (*sighandler_t)(int) ;
sighandler_t  signal(int signum,sighandler_t hanlder) ;

Void (*signal)(int sig,void (*handler)(int))(int s);

信号分类：
1、不可靠信号
信号丢失现象->信号压缩：当前信号还没处理完，后面来的信号只处理一个
信号处理函数执行期间，阻塞本信号
2、可靠信号
3、实时信号就是可靠信号
4、非实时信号就是不可靠信号

Ulimit：用于查看系统进程所占资源

#include<signal.h>
int kill(pid_t pid,int signo);
Int raise(int signo) ;
Void abort(void);

Linux通用函数：
Int ioctl(int d,int request,...);

Int kill(pid_t pid,int sig);
Pid>0 : 杀死对应的进程
Pid=0:杀死进程所在进程组中所在的所有进程
Pid=-1:杀死本进程有权限杀死的所有进程
Pid<-1:杀死-pid进程

信号可以实现不同进程之间的通信.
信号先发给内核，由内核转发给对应的进程.

Int raise(int sig);//发送信号给自己

子进程死亡会给父进程发送 SIGCHLD 信号

#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <pthread.h>
#include <unistd.h>

void h(int s){ 
         while( waitpid(-1,NULL,WNOHANG) > 0 ) ; 
}
int main(){

        signal(SIGCHLD,h);
        int num = 10 ; 
        int i ; 
        pid_t pid = getpid() ;

        for(i=0;i<num;++i){
                if(fork() == 0){ 
                        break ;
                }
        }
    
        if(pid == getpid() ){
                for(;;){
                        printf("$") ; fflush(stdout);sleep(1) ;
                }
        } else for(i = 0 ; i<num ; ++i){
                printf(".") ; fflush(stdout);sleep(1) ;
        }
        return 0 ; 
}

Int setitimer(int which,const struct itimerval* new_value,struct itimerval *old_value) ;

Struct itimerval{
	struct timeval it_interval ; // interval
Struct timeval it_value; // start time
};
Struct timeval{
Time_t tv_sec ; // seconds
Seconds_t tv_usec ; // microseconds
};

Uptime:显式时间，系统运行了多久，当前登陆的用户有多少，以及1、5、15分钟系统的平均负载.
Top:性能分析工具，能够实时显式系统中各个进程的资源占用状况，类似于Windows的任务管理器.
https://www.cnblogs.com/niuben/p/12017242.html
Cd /proc/1:进程1的具体参数内容

可重入函数
不可重入函数
放在信号处理函数中会出现意外结果.
用了静态变量、malloc/free、全局变量、标准IO、
注意：信号处理函数尽可能短小精悍.
信号屏蔽
信号集

Malloc(sz):
Sz：合法地址
后面多余的申请空间为有效地址
Malloc操作并非是原子操作.
内存池

EINTR:表示被信号打断.
Read():自启动，在被信号打断有的可以自启动，有的直接就出错.


信号产生-->信号未决-->信号抵达
阻塞/屏蔽

相关概念:
1、实际执行信号的处理动作称为信号抵达（delivery）
2、信号从产生到抵达之间的状态称为信号未决
3、被阻塞的信号产生时将保持在未决状态，直到进程解除对此信号的阻塞，才执行抵达的动作;
4、阻塞时不会抵达的，忽略时在抵达之后的一种处理动作；
信号子进程会继承过来从父进程那儿.

#include <signal.h>
int sigemptyset(sigset_t* set) ;
Int sigfillset(sigset_t* set) ;
Int sigaddset(sigset_t* set,int signum) ;
Int sigdelset(sigset_t* set,int signum) ;
Int sigprocmask(SIG_BLOK,&mask,NULL);

Int sigismember(const sigset_t*  set,int signum);








前台进程：是当前正在使用的程序；
后台进程：是在当前没有使用的但是也在运行的进程，包括那些系统隐藏或者没有图形化界面的程序；

Linux中将前台进程挂到后台的意思就是，退出程序但是让这个程序依然进行运行，而不是退出程序只能关闭；
特点：
1、前台进程可以自己控制，后台进程由系统进行维护和管理；
2、前台进程和后台进程可以互相转换；
3、由于是后台进程，所以系统会将主要精力放在前台也就是当前进程中，后台进程自然会比较慢；


守护进程 Daemon（后台进程）：
是一类在后台运行的特殊进程，用于执行特定的系统任务.很多守护进程在系统引导的时候启动，并且一直运行直到系统关闭.另一些只在需要的时候才启动，完成任务后就会自动结束.守护进程是脱离终端并且在后台运行的进程，脱离终端是为了避免在执行的过程中的信息在终端上显式，并且进程也不会被任何终端所产生的终端信息所打断.守护进程一般的生命周期是系统启动到系统停止运行，典型例子，服务进程，可利用守护进程来完成很多的系统或者自动化任务.

shell下，进程的前后台操作：
1、& 放在命令后，将程序放在后台执行
2、Ctrl + z 可以将一个正在前台执行的命令放在后台，并且暂停
3、Jobs -l 查看当前有多少后台运行的命令
4、Fg 将后台中的命令调至前台继续运行
5、Bg 将一个后台暂停的命令，变成继续执行


SIGKILL 与 SIGSTOP不可以捕捉

Core文件：在一个程序崩溃时，一般会在指定目录下生成一个core文件，core文件仅仅是一个内存映像(同时加上调试信息），主要是用来调试.


Kill函数可以给一个指定的进程发送指定的信号.
raise函数可以给当前进程发送指定的信号（自己给自己发送信号）.
#include <signal.h>
int kill(pid_t pid,int signo);
Int raise(int signo);
这两个函数都是成功return 0,错误return -1;

Abort函数使当前进程接收到信号而异常终止.
#include <stdlib.h>
void abort(void) ;
就像exit函数一样，abort函数总是会成功，没有返回值.

硬件异常产生信号：
硬件异常被硬件以某种方式被硬件检测到并通知内核.然后内核向当前进程发送适当的信号.
执行了除了以0的指令，CPU的运算单元会产生异常，内核将这个异常解释为SIGPIPE信号发送给进程.访问了非法内存地址，MMU会产生异常，内核将这个异常解释为SIGSEGV信号发送给进程.

信号捕捉初识：

产生的信号最终都有OS来进行执行，因为OS是进程的管理者.
信号的处理在合适的处理

信号其他相关的概念：
1、实际执行信号的处理动作称为信号递达（delivery）；
2、信号从产生到递达之间的状态，称为信号未决（pending）；
3、进程可以选择阻塞（Block）某个信号；
4、被阻塞的信号产生时将保持在未决状态，直到进程解除对此信号的阻塞，才执行递达的动作；
5、注意：阻塞和忽略是不同的，只要信号被阻塞就不会递达，而忽略是在递达之后可选的一种处理动作；


信号集操作处理函数：
#include <signal.h>
int sigemptyset(sigset_t *set) ;
Int sigfillset(sigset_t *set) ;
Int sigaddset(sigset_t* set,int signo) ;
Int sigdelset(sigset_t* set,int signo) ;
Int sigismember(const sigset_t* set,int signo) ;

Int sigprocmask(int how,const sigset_t* set,sigset_t* oset) ;
How:SIG_BLOCK,SIG_UNBLOCK,SIG_SETMASK

// 带有信号的pause
Int sigsuspend(const sigset_t* mask) ;


Sigaction()
Sigset_t set
Sigemptyset/sigismember/sigaddset/sigdelset
Sigpending/


题：
1、逻辑运算符短路；
2、
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
int main(){
        printf("%s,[%-5.2s]\n","zhenghong","zhenghong") ;
        return 0 ; 
}
==> Zhenghong , [   zh]

3、int *p[4] ==> int*(p[4]) 
4、在函数代码少、频繁调用的情况下适合采用 inline 定义的内联函数
5、在设定了参数的默认值以后，该参数的后面定义的所有参数都必须设定默认值
5、静态数据成员是所有对象共有的；静态数据成员在类外进行初始化；静态数据成员用static修饰；引用静态数据成员时，要在静态数据成员前加 <类名>::
6、派生类一般都是公有派生；对基类成员的访问必须是无二义性的；赋值兼容规则也适用于多重继承的组合；父类的公有成员在派生类中的访问权限还得根据继承类型；内联函数不能是虚函数；
7、定义在class声明内的成员函数默认是inline函数
8、任何引用都必须要指向一个实例


